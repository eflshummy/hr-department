import React, { useState } from "react";
import { jsPDF } from "jspdf";
import autoTable from "jspdf-autotable";
import PayRollData from "../data/payroll_data.json";

const PayRoll = () => {
  const initialEmployees = PayRollData.payrollData;
  const [employees] = useState(initialEmployees);
  const [selectedEmployee, setSelectedEmployee] = useState(null);

  const downloadPayslipPDF = (emp) => {
    const doc = new jsPDF();

    const pageWidth = doc.internal.pageSize.getWidth();
    const pageHeight = doc.internal.pageSize.getHeight();
    const margin = 20;
    const centerX = pageWidth / 2;

    const headerColor = [155, 89, 182]; // #9B59B6
    const darkTextColor = [38, 38, 38]; // #262626

    // Header Title
    doc.setFontSize(20);
    doc.setTextColor(...headerColor);
    doc.text("Employee Payslip", centerX, 20, { align: "center" });

    // Sub-header with date
    doc.setFontSize(12);
    doc.setTextColor(...darkTextColor);
    const today = new Date().toLocaleDateString();
    doc.text(`Date Issued: ${today}`, margin, 30);

    // Section 1 - Employee Info
    doc.setFontSize(14);
    doc.setTextColor(...headerColor);
    doc.text("Employee Information", margin, 40);

    autoTable(doc, {
      startY: 45,
      head: [["Field", "Value"]],
      body: [
        ["Employee ID", emp.employeeId],
        ["Name", emp.name],
        ["Department", emp.department],
        ["Position", emp.position],
      ],
      theme: "grid",
      headStyles: {
        fillColor: headerColor,
        textColor: 255,
      },
      styles: {
        fontSize: 11,
        cellPadding: 3,
        textColor: darkTextColor,
        lineColor: darkTextColor,
      },
      margin: { left: margin, right: margin },
    });

    // Section 2 - Salary Breakdown
    const salaryY = doc.lastAutoTable.finalY + 10;
    doc.setFontSize(14);
    doc.setTextColor(...headerColor);
    doc.text("Salary Breakdown", margin, salaryY);

    autoTable(doc, {
      startY: salaryY + 5,
      head: [["Description", "Amount"]],
      body: [
        ["Hours Worked", emp.hoursWorked],
        ["Leave Deductions", `R${emp.leaveDeductions}`],
        ["Final Salary", `R${emp.finalSalary}`],
      ],
      theme: "striped",
      headStyles: {
        fillColor: headerColor,
        textColor: 255,
      },
      styles: {
        fontSize: 11,
        cellPadding: 3,
        textColor: darkTextColor,
        lineColor: darkTextColor,
        fillColor: [245, 245, 245],
      },
      margin: { left: margin, right: margin },
    });

    // Footer
    doc.setFontSize(10);
    doc.setTextColor(...darkTextColor);
    doc.text("Generated by HR System", centerX, pageHeight - 20, { align: "center" });

    doc.save(`Employee_${emp.employeeId}_Payslip.pdf`);
  };

  return (
    <div style={{ padding: 20, fontFamily: "Arial, sans-serif" }}>
      <h1>Payroll Page</h1>

      <table style={{ width: "100%", borderCollapse: "collapse" }}>
        <thead>
          <tr style={{ backgroundColor: "#f3f4f6" }}>
            <th style={cellStyle}>Employee ID</th>
            <th style={cellStyle}>Name</th>
            <th style={cellStyle}>Department</th>
            <th style={cellStyle}>Position</th>
            <th style={cellStyle}>Hours Worked</th>
            <th style={cellStyle}>Leave Deductions</th>
            <th style={cellStyle}>Final Salary</th>
            <th style={cellStyle}>Payslip</th>
          </tr>
        </thead>
        <tbody>
          {employees.map((emp) => (
            <tr key={emp.employeeId}>
              <td style={cellStyle}>{emp.employeeId}</td>
              <td style={cellStyle}>{emp.name}</td>
              <td style={cellStyle}>{emp.department}</td>
              <td style={cellStyle}>{emp.position}</td>
              <td style={cellStyle}>{emp.hoursWorked}</td>
              <td style={cellStyle}>R{emp.leaveDeductions}</td>
              <td style={cellStyle}>R{emp.finalSalary}</td>
              <td style={cellStyle}>
                <button onClick={() => setSelectedEmployee(emp)}>
                  View Payslip
                </button>
              </td>
            </tr>
          ))}
        </tbody>
      </table>

      {selectedEmployee && (
        <div
          onClick={() => setSelectedEmployee(null)}
          style={modalOverlay}
          role="dialog"
          aria-modal="true"
        >
          <div onClick={(e) => e.stopPropagation()} style={modalContent}>
            <h2>Payslip Preview</h2>
            <p><strong>Employee ID:</strong> {selectedEmployee.employeeId}</p>
            <p><strong>Name:</strong> {selectedEmployee.name}</p>
            <p><strong>Department:</strong> {selectedEmployee.department}</p>
            <p><strong>Position:</strong> {selectedEmployee.position}</p>
            <p><strong>Hours Worked:</strong> {selectedEmployee.hoursWorked}</p>
            <p><strong>Leave Deductions:</strong> R{selectedEmployee.leaveDeductions}</p>
            <p><strong>Final Salary:</strong> R{selectedEmployee.finalSalary}</p>

            <button
              style={{ marginTop: 10 }}
              onClick={() => downloadPayslipPDF(selectedEmployee)}
            >
              Download PDF
            </button>

            <button
              style={{ marginTop: 10, marginLeft: 10 }}
              onClick={() => setSelectedEmployee(null)}
            >
              Close
            </button>
          </div>
        </div>
      )}
    </div>
  );
};

// Styles
const cellStyle = {
  border: "1px solid #ddd",
  padding: "8px",
  textAlign: "left",
};

const modalOverlay = {
  position: "fixed",
  top: 0,
  left: 0,
  width: "100vw",
  height: "100vh",
  background: "rgba(0,0,0,0.5)",
  display: "flex",
  justifyContent: "center",
  alignItems: "center",
  zIndex: 1000,
};

const modalContent = {
  background: "#fff",
  padding: 20,
  borderRadius: 8,
  minWidth: 300,
  maxWidth: 400,
};

export default PayRoll;
